// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(PaginaContext))]
    [Migration("20230725182045_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Entities.Documento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdDocumento")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Numero")
                        .HasColumnType("int")
                        .HasColumnName("Numero");

                    b.Property<int>("TipoId")
                        .HasColumnType("int")
                        .HasColumnName("Tipo_Id");

                    b.HasKey("Id");

                    b.HasIndex("TipoId");

                    b.ToTable("Documento", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdEmail")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("Correo");

                    b.HasKey("Id");

                    b.ToTable("Email", (string)null);
                });

            modelBuilder.Entity("Core.Entities.InfoPersonal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdInfo")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DocumentoId")
                        .HasColumnType("int")
                        .HasColumnName("Documento_Id");

                    b.Property<int>("Edad")
                        .HasColumnType("int")
                        .HasColumnName("Edad");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("NombreCompleto");

                    b.Property<string>("Ocupacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("Ocupacion");

                    b.Property<int>("TelefonoId")
                        .HasColumnType("int")
                        .HasColumnName("Telefono_Id");

                    b.HasKey("Id");

                    b.HasIndex("DocumentoId");

                    b.HasIndex("TelefonoId");

                    b.ToTable("DatosPersonales", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Login", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdLogin")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("Created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("EmailId")
                        .HasColumnType("int")
                        .HasColumnName("Email_Id");

                    b.Property<int>("InfoId")
                        .HasColumnType("int")
                        .HasColumnName("Info_Id");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("Password");

                    b.HasKey("Id");

                    b.HasIndex("EmailId");

                    b.HasIndex("InfoId");

                    b.ToTable("Login", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Telefono", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdTelefono")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Telefonos")
                        .HasColumnType("int")
                        .HasColumnName("Telefonos");

                    b.HasKey("Id");

                    b.ToTable("Telefono", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TipoDocumento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdTipo")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cedula")
                        .HasColumnType("int")
                        .HasColumnName("Cedula");

                    b.Property<int>("DNI")
                        .HasColumnType("int")
                        .HasColumnName("DNI");

                    b.Property<int>("Licencia")
                        .HasColumnType("int")
                        .HasColumnName("Licencia");

                    b.Property<int>("Pasaporte")
                        .HasColumnType("int")
                        .HasColumnName("Pasaporte");

                    b.HasKey("Id");

                    b.ToTable("TipoDeDocuemnto", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Documento", b =>
                {
                    b.HasOne("Core.Entities.TipoDocumento", "TipoDeDoumento")
                        .WithMany("Documentos")
                        .HasForeignKey("TipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoDeDoumento");
                });

            modelBuilder.Entity("Core.Entities.InfoPersonal", b =>
                {
                    b.HasOne("Core.Entities.Documento", "Documentos")
                        .WithMany("DatosPersonales")
                        .HasForeignKey("DocumentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Telefono", "Telefonos")
                        .WithMany("DatosPersonales")
                        .HasForeignKey("TelefonoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Documentos");

                    b.Navigation("Telefonos");
                });

            modelBuilder.Entity("Core.Entities.Login", b =>
                {
                    b.HasOne("Core.Entities.Email", "Emails")
                        .WithMany("Logins")
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.InfoPersonal", "Datospersonales")
                        .WithMany("Logins")
                        .HasForeignKey("InfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Datospersonales");

                    b.Navigation("Emails");
                });

            modelBuilder.Entity("Core.Entities.Documento", b =>
                {
                    b.Navigation("DatosPersonales");
                });

            modelBuilder.Entity("Core.Entities.Email", b =>
                {
                    b.Navigation("Logins");
                });

            modelBuilder.Entity("Core.Entities.InfoPersonal", b =>
                {
                    b.Navigation("Logins");
                });

            modelBuilder.Entity("Core.Entities.Telefono", b =>
                {
                    b.Navigation("DatosPersonales");
                });

            modelBuilder.Entity("Core.Entities.TipoDocumento", b =>
                {
                    b.Navigation("Documentos");
                });
#pragma warning restore 612, 618
        }
    }
}
